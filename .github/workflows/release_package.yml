name: Release Python Package

on:
  push:
    branches: [ stable ] 

permissions:
  contents: write
  packages: write

jobs:
  check-flags:
    runs-on: ubuntu-latest
    outputs:
      skip-tests: ${{ steps.check-commit.outputs.skip-tests }}
      skip-release: ${{ steps.check-commit.outputs.skip-release }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Check commit flags
        id: check-commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Full commit message: $COMMIT_MESSAGE"
          
          # Debug output to see if SKIP-TESTS is present
          echo "Checking for SKIP-TESTS in commit message..."
          if echo "$COMMIT_MESSAGE" | grep -q "\[SKIP-TESTS\]"; then
            echo "Found exact [SKIP-TESTS] pattern"
            echo "skip-tests=true" >> $GITHUB_OUTPUT
          else
            echo "Did not find exact [SKIP-TESTS] pattern"
            echo "skip-tests=false" >> $GITHUB_OUTPUT
          fi
          
          # Debug output to see if SKIP-RELEASE is present
          echo "Checking for SKIP-RELEASE in commit message..."
          if echo "$COMMIT_MESSAGE" | grep -q "\[SKIP-RELEASE\]"; then
            echo "Found exact [SKIP-RELEASE] pattern"
            echo "skip-release=true" >> $GITHUB_OUTPUT
          else
            echo "Did not find exact [SKIP-RELEASE] pattern"
            echo "skip-release=false" >> $GITHUB_OUTPUT
          fi
          
          # Final debug output
          echo "skip-tests value: $(grep skip-tests $GITHUB_OUTPUT | cut -d= -f2)"
          echo "skip-release value: $(grep skip-release $GITHUB_OUTPUT | cut -d= -f2 || echo 'not set')"

  test:
    needs: check-flags
    if: needs.check-flags.outputs.skip-tests != 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox tox-gh-actions
    - name: Test with tox
      run: tox

  debug-outputs:
    needs: check-flags
    runs-on: ubuntu-latest
    steps:
    - name: Debug output values
      run: |
        echo "Skip tests: ${{ needs.check-flags.outputs.skip-tests }}"
        echo "Skip release: ${{ needs.check-flags.outputs.skip-release }}"

  build-and-release:
    needs: [check-flags, test, debug-outputs]
    if: |
      needs.check-flags.outputs.skip-release != 'true' && 
      (needs.test.result == 'success' || needs.check-flags.outputs.skip-tests == 'true')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine requests
    
    - name: Check version availability
      run: |
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        PACKAGE_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
        echo "Checking if version $VERSION exists on PyPI..."
        
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://pypi.org/pypi/$PACKAGE_NAME/$VERSION/json)
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "Error: Version $VERSION already exists on PyPI. Please increment the version number."
          exit 1
        else
          echo "Version $VERSION is available for release."
        fi

    - name: Build package
      run: python -m build
    
    - name: Create tarball of package
      run: |
        mkdir -p dist/release
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        PACKAGE_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
        COMPATIBLE_VERSIONS=$(python -c "import tomllib, json; print(json.dumps(tomllib.load(open('pyproject.toml', 'rb'))['tool']['sorterpy']['compatible_api_versions']))")
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        echo "COMPATIBLE_VERSIONS=$COMPATIBLE_VERSIONS" >> $GITHUB_ENV
        tar -czf "dist/release/${PACKAGE_NAME}-${VERSION}.tar.gz" dist/*.whl dist/*.tar.gz
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.PACKAGE_VERSION }}
        name: ${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}
        body: |
          Release version ${{ env.PACKAGE_VERSION }}
          
          Compatible Sorter API versions: ${{ env.COMPATIBLE_VERSIONS }}
          
          PyPI Package: https://pypi.org/project/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_VERSION }}/
        draft: false
        prerelease: false
        files: |
          dist/release/${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}.tar.gz
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*.whl dist/*.tar.gz
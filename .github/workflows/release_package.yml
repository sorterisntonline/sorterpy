name: Release Python Package

on:
  push:
    branches: [ stable ] 

permissions:
  contents: write
  packages: write

jobs:
  check-flags:
    runs-on: ubuntu-latest
    outputs:
      skip-tests: ${{ steps.check-commit.outputs.skip-tests }}
      skip-release: ${{ steps.check-commit.outputs.skip-release }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Check commit flags
        id: check-commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Full commit message: $COMMIT_MESSAGE"
          
          # Check for SKIP-TESTS with exact bracket matching
          if echo "$COMMIT_MESSAGE" | grep -q "\[SKIP-TESTS\]"; then
            echo "Found [SKIP-TESTS] tag"
            SKIP_TESTS="true"
          else
            echo "No [SKIP-TESTS] tag found"
            SKIP_TESTS="false"
          fi
          echo "skip-tests=$SKIP_TESTS" >> $GITHUB_OUTPUT
          
          # Check for SKIP-RELEASE with exact bracket matching
          if echo "$COMMIT_MESSAGE" | grep -q "\[SKIP-RELEASE\]"; then
            echo "Found [SKIP-RELEASE] tag"
            SKIP_RELEASE="true"
          else
            echo "No [SKIP-RELEASE] tag found"
            SKIP_RELEASE="false"
          fi
          echo "skip-release=$SKIP_RELEASE" >> $GITHUB_OUTPUT
          
          # Print the final output values for debugging
          echo "Final output values:"
          echo "skip-tests: $SKIP_TESTS"
          echo "skip-release: $SKIP_RELEASE"

  test:
    needs: check-flags
    if: needs.check-flags.outputs.skip-tests != 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox tox-gh-actions
    - name: Test with tox
      run: tox

  # This job always runs and determines if we should build and release
  determine-release:
    needs: [check-flags, test]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.set-release.outputs.should-release }}
    steps:
    - name: Determine if release should happen
      id: set-release
      run: |
        SKIP_TESTS="${{ needs.check-flags.outputs.skip-tests }}"
        SKIP_RELEASE="${{ needs.check-flags.outputs.skip-release }}"
        TEST_RESULT="${{ needs.test.result }}"
        
        echo "Debug values received:"
        echo "SKIP_TESTS: $SKIP_TESTS"
        echo "SKIP_RELEASE: $SKIP_RELEASE"
        echo "TEST_RESULT: $TEST_RESULT"
        
        SHOULD_RELEASE="false"
        REASON=""
        
        if [[ "$SKIP_RELEASE" == "true" ]]; then
          REASON="Skipping release as requested in commit message"
        elif [[ "$TEST_RESULT" == "success" ]]; then
          SHOULD_RELEASE="true"
          REASON="Tests passed, proceeding with release"
        elif [[ "$SKIP_TESTS" == "true" ]]; then
          SHOULD_RELEASE="true"
          REASON="Tests skipped, but proceeding with release"
        else
          REASON="Tests failed or were not run, skipping release"
        fi
        
        echo "$REASON"
        echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
        echo "Final decision: should-release=$SHOULD_RELEASE"

  build-and-release:
    needs: determine-release
    if: needs.determine-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine requests
    
    - name: Check version availability
      run: |
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        PACKAGE_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
        echo "Checking if version $VERSION exists on PyPI..."
        
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://pypi.org/pypi/$PACKAGE_NAME/$VERSION/json)
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "Error: Version $VERSION already exists on PyPI. Please increment the version number."
          exit 1
        else
          echo "Version $VERSION is available for release."
        fi

    - name: Build package
      run: python -m build
    
    - name: Create tarball of package
      run: |
        mkdir -p dist/release
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        PACKAGE_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
        COMPATIBLE_VERSIONS=$(python -c "import tomllib, json; print(json.dumps(tomllib.load(open('pyproject.toml', 'rb'))['tool']['sorterpy']['compatible_api_versions']))")
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        echo "COMPATIBLE_VERSIONS=$COMPATIBLE_VERSIONS" >> $GITHUB_ENV
        tar -czf "dist/release/${PACKAGE_NAME}-${VERSION}.tar.gz" dist/*.whl dist/*.tar.gz
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.PACKAGE_VERSION }}
        name: ${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}
        body: |
          Release version ${{ env.PACKAGE_VERSION }}
          
          Compatible Sorter API versions: ${{ env.COMPATIBLE_VERSIONS }}
          
          PyPI Package: https://pypi.org/project/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_VERSION }}/
        draft: false
        prerelease: false
        files: |
          dist/release/${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}.tar.gz
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*.whl dist/*.tar.gz
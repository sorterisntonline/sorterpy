name: Release Python Package

on:
  push:
    branches: [ stable ] 

permissions:
  contents: write
  packages: write

jobs:
  check-skip:
    runs-on: ubuntu-latest
    outputs:
      skip-tests: ${{ steps.check-commit.outputs.skip-tests }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Check if tests should be skipped
        id: check-commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MESSAGE" | grep -q "SKIP-TESTS"; then
            echo "skip-tests=true" >> $GITHUB_OUTPUT
          else
            echo "skip-tests=false" >> $GITHUB_OUTPUT
          fi

  test:
    needs: check-skip
    if: needs.check-skip.outputs.skip-tests != 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox tox-gh-actions
    - name: Test with tox
      run: tox

  build-and-release:
    needs: [check-skip, test]
    if: always() && (needs.test.result == 'success' || needs.check-skip.outputs.skip-tests == 'true')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
    - name: Build package
      run: python -m build
    
    - name: Create tarball of package
      run: |
        mkdir -p dist/release
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        PACKAGE_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
        COMPATIBLE_VERSIONS=$(python -c "import tomllib, json; print(json.dumps(tomllib.load(open('pyproject.toml', 'rb'))['tool']['sorterpy']['compatible_api_versions']))")
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        echo "COMPATIBLE_VERSIONS=$COMPATIBLE_VERSIONS" >> $GITHUB_ENV
        tar -czf "dist/release/${PACKAGE_NAME}-${VERSION}.tar.gz" dist/*.whl dist/*.tar.gz
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.PACKAGE_VERSION }}
        name: ${{ env.PACKAGE_NAME }} v${{ env.PACKAGE_VERSION }}
        body: |
          Release version ${{ env.PACKAGE_VERSION }}
          
          Compatible Sorter API versions: ${{ env.COMPATIBLE_VERSIONS }}
        draft: false
        prerelease: false
        files: |
          dist/release/${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}.tar.gz
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*.whl dist/*.tar.gz 